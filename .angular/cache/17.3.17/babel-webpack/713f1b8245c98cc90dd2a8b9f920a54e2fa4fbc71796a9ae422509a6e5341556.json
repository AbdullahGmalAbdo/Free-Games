{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ThemeService {\n  constructor() {\n    this.currentTheme = new BehaviorSubject('dark');\n    this.theme$ = this.currentTheme.asObservable();\n  }\n  initializeTheme() {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      this.setTheme(savedTheme);\n    } else {\n      this.setTheme('dark');\n    }\n  }\n  setTheme(theme) {\n    this.currentTheme.next(theme);\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('theme', theme);\n  }\n  toggleTheme() {\n    const newTheme = this.currentTheme.value === 'dark' ? 'light' : 'dark';\n    this.setTheme(newTheme);\n  }\n  getCurrentTheme() {\n    return this.currentTheme.value;\n  }\n  static {\n    this.ɵfac = function ThemeService_Factory(t) {\n      return new (t || ThemeService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ThemeService,\n      factory: ThemeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","ThemeService","constructor","currentTheme","theme$","asObservable","initializeTheme","savedTheme","localStorage","getItem","setTheme","theme","next","document","documentElement","setAttribute","setItem","toggleTheme","newTheme","value","getCurrentTheme","factory","ɵfac","providedIn"],"sources":["/home/project/src/app/core/services/theme.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nexport type Theme = 'light' | 'dark';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n  private currentTheme = new BehaviorSubject<Theme>('dark');\n  public theme$ = this.currentTheme.asObservable();\n\n  initializeTheme(): void {\n    const savedTheme = localStorage.getItem('theme') as Theme;\n    if (savedTheme) {\n      this.setTheme(savedTheme);\n    } else {\n      this.setTheme('dark');\n    }\n  }\n\n  setTheme(theme: Theme): void {\n    this.currentTheme.next(theme);\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('theme', theme);\n  }\n\n  toggleTheme(): void {\n    const newTheme = this.currentTheme.value === 'dark' ? 'light' : 'dark';\n    this.setTheme(newTheme);\n  }\n\n  getCurrentTheme(): Theme {\n    return this.currentTheme.value;\n  }\n}"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAOtC,OAAM,MAAOC,YAAY;EAHzBC,YAAA;IAIU,KAAAC,YAAY,GAAG,IAAIH,eAAe,CAAQ,MAAM,CAAC;IAClD,KAAAI,MAAM,GAAG,IAAI,CAACD,YAAY,CAACE,YAAY,EAAE;;EAEhDC,eAAeA,CAAA;IACb,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAU;IACzD,IAAIF,UAAU,EAAE;MACd,IAAI,CAACG,QAAQ,CAACH,UAAU,CAAC;KAC1B,MAAM;MACL,IAAI,CAACG,QAAQ,CAAC,MAAM,CAAC;;EAEzB;EAEAA,QAAQA,CAACC,KAAY;IACnB,IAAI,CAACR,YAAY,CAACS,IAAI,CAACD,KAAK,CAAC;IAC7BE,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEJ,KAAK,CAAC;IAC1DH,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAEL,KAAK,CAAC;EACtC;EAEAM,WAAWA,CAAA;IACT,MAAMC,QAAQ,GAAG,IAAI,CAACf,YAAY,CAACgB,KAAK,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM;IACtE,IAAI,CAACT,QAAQ,CAACQ,QAAQ,CAAC;EACzB;EAEAE,eAAeA,CAAA;IACb,OAAO,IAAI,CAACjB,YAAY,CAACgB,KAAK;EAChC;;;uBA1BWlB,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAoB,OAAA,EAAZpB,YAAY,CAAAqB,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}