{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class GuestGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    if (!this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      this.router.navigate(['/home']);\n      return false;\n    }\n  }\n  static {\n    this.ɵfac = function GuestGuard_Factory(t) {\n      return new (t || GuestGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GuestGuard,\n      factory: GuestGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["GuestGuard","constructor","authService","router","canActivate","isAuthenticated","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["/home/project/src/app/core/guards/guest.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GuestGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(): boolean {\n    if (!this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      this.router.navigate(['/home']);\n      return false;\n    }\n  }\n}"],"mappings":";;;AAOA,OAAM,MAAOA,UAAU;EACrBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CAAA;IACT,IAAI,CAAC,IAAI,CAACF,WAAW,CAACG,eAAe,EAAE,EAAE;MACvC,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACF,MAAM,CAACG,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC/B,OAAO,KAAK;;EAEhB;;;uBAbWN,UAAU,EAAAO,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAVZ,UAAU;MAAAa,OAAA,EAAVb,UAAU,CAAAc,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}