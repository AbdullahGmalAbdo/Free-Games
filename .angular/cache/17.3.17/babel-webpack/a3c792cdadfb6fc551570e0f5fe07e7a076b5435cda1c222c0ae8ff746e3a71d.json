{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.API_URL = 'https://movies-api.routemisr.com';\n    this.isAuthenticatedSubject = new BehaviorSubject(this.hasToken());\n    this.isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n  }\n  hasToken() {\n    return !!localStorage.getItem('uToken');\n  }\n  login(credentials) {\n    return this.http.post(`${this.API_URL}/signin`, credentials).pipe(tap(response => {\n      if (response.message === 'success' && response.token) {\n        localStorage.setItem('uToken', response.token);\n        this.isAuthenticatedSubject.next(true);\n      }\n    }));\n  }\n  register(userData) {\n    return this.http.post(`${this.API_URL}/signup`, userData);\n  }\n  logout() {\n    localStorage.removeItem('uToken');\n    this.isAuthenticatedSubject.next(false);\n    this.router.navigate(['/login']);\n  }\n  getToken() {\n    return localStorage.getItem('uToken');\n  }\n  isAuthenticated() {\n    return this.hasToken();\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","router","API_URL","isAuthenticatedSubject","hasToken","isAuthenticated$","asObservable","localStorage","getItem","login","credentials","post","pipe","response","message","token","setItem","next","register","userData","logout","removeItem","navigate","getToken","isAuthenticated","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["/home/project/src/app/core/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\nimport { Router } from '@angular/router';\n\nexport interface LoginRequest {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterRequest {\n  first_name: string;\n  last_name: string;\n  email: string;\n  password: string;\n  age: number;\n}\n\nexport interface AuthResponse {\n  message: string;\n  token?: string;\n  errors?: any;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private readonly API_URL = 'https://movies-api.routemisr.com';\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(this.hasToken());\n  public isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) {}\n\n  private hasToken(): boolean {\n    return !!localStorage.getItem('uToken');\n  }\n\n  login(credentials: LoginRequest): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.API_URL}/signin`, credentials)\n      .pipe(\n        tap(response => {\n          if (response.message === 'success' && response.token) {\n            localStorage.setItem('uToken', response.token);\n            this.isAuthenticatedSubject.next(true);\n          }\n        })\n      );\n  }\n\n  register(userData: RegisterRequest): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.API_URL}/signup`, userData);\n  }\n\n  logout(): void {\n    localStorage.removeItem('uToken');\n    this.isAuthenticatedSubject.next(false);\n    this.router.navigate(['/login']);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('uToken');\n  }\n\n  isAuthenticated(): boolean {\n    return this.hasToken();\n  }\n}"],"mappings":"AAEA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;;;;AAyBvD,OAAM,MAAOC,WAAW;EAKtBC,YACUC,IAAgB,EAChBC,MAAc;IADd,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,MAAM,GAANA,MAAM;IANC,KAAAC,OAAO,GAAG,kCAAkC;IACrD,KAAAC,sBAAsB,GAAG,IAAIP,eAAe,CAAU,IAAI,CAACQ,QAAQ,EAAE,CAAC;IACvE,KAAAC,gBAAgB,GAAG,IAAI,CAACF,sBAAsB,CAACG,YAAY,EAAE;EAKjE;EAEKF,QAAQA,CAAA;IACd,OAAO,CAAC,CAACG,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EACzC;EAEAC,KAAKA,CAACC,WAAyB;IAC7B,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAe,GAAG,IAAI,CAACT,OAAO,SAAS,EAAEQ,WAAW,CAAC,CACvEE,IAAI,CACHf,GAAG,CAACgB,QAAQ,IAAG;MACb,IAAIA,QAAQ,CAACC,OAAO,KAAK,SAAS,IAAID,QAAQ,CAACE,KAAK,EAAE;QACpDR,YAAY,CAACS,OAAO,CAAC,QAAQ,EAAEH,QAAQ,CAACE,KAAK,CAAC;QAC9C,IAAI,CAACZ,sBAAsB,CAACc,IAAI,CAAC,IAAI,CAAC;;IAE1C,CAAC,CAAC,CACH;EACL;EAEAC,QAAQA,CAACC,QAAyB;IAChC,OAAO,IAAI,CAACnB,IAAI,CAACW,IAAI,CAAe,GAAG,IAAI,CAACT,OAAO,SAAS,EAAEiB,QAAQ,CAAC;EACzE;EAEAC,MAAMA,CAAA;IACJb,YAAY,CAACc,UAAU,CAAC,QAAQ,CAAC;IACjC,IAAI,CAAClB,sBAAsB,CAACc,IAAI,CAAC,KAAK,CAAC;IACvC,IAAI,CAAChB,MAAM,CAACqB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAC,QAAQA,CAAA;IACN,OAAOhB,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EACvC;EAEAgB,eAAeA,CAAA;IACb,OAAO,IAAI,CAACpB,QAAQ,EAAE;EACxB;;;uBA1CWN,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAXhC,WAAW;MAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}